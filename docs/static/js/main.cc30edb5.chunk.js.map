{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,KAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAUH,GAH9C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAuBxC,OAjBAC,qBAAU,WACNxB,EAASC,GACRwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGjB,CAAEpB,IASEqB,EDnByBK,CAAc1B,GAAjCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QAUrB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAkDhB,IACjDoB,GAAW,4CACZ,qBAAKJ,UAAU,cAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aErBxBgB,EAAe,WAAO,IAAD,EACMzC,mBAAS,CAAC,cADhB,mBACvB0C,EADuB,KACX3C,EADW,KAM9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCblC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.cc30edb5.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n    \n    const [inputValue, setInputValue] = useState(\" \");\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats]);        \n            setInputValue('');\n        }        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                value={ inputValue }\n                onChange={ handleInputChange }\n            ></input>\n        </ form>\n    )\n}\n\n// Define types of data\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n","\nexport const getGifs = async ( category) => {\n    // https://api.giphy.com/v1/gifs/search\n    // id_key: 24z1FBhejARrS4Zxi48YFbuRycz4Ltdb\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)  }&limit=10&api_key=24z1FBhejARrS4Zxi48YFbuRycz4Ltdb`;\n    const resp = await fetch (url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n\n    });\n    return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    // console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">          \n          <img src={ url } alt={ title } />\n          <p>{ title }</p>\n        </div>\n    );        \n}\n","import React, { useState, useEffect } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n// import { getGifs } from '../helpers/GetGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    // const [images, setImages] = useState([]); // array like argument\n    const { data:images, loading} = useFetchGifs( category );    \n    \n    \n    // useEffect( () => {\n    //     getGifs(category)\n    //     .then( setImages )\n    // }, [ category ]);\n    \n    // getGif();\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__flash\">{category}</h3>\n            {loading && <p>Cargando...</p>}\n            <div className=\"card-grid  \">              \n                { \n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id} \n                            {...img}\n                        /> \n                    ))\n                }\n            </div>\n        </>\n        \n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({ \n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs( category )\n        .then( imgs => {                \n            setState({\n                data:imgs,\n                loading:false,\n            });            \n        });\n    }, [ category ])\n\n    // setTimeout(() => {\n    //     setState({\n    //         data: [1,2,3,4,5],\n    //         loading:false\n    //     })\n    // }, 3000);\n\n    return state; // { data:[], loading:true }\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'Darwin']);\n    //     setCategories(cats => [...cats, \"Darwin\"]);\n    // }\n    return (\n        <>\n            <h2>Gif Expert App</h2>    \n            <AddCategory setCategories={setCategories} />\n            <hr />\n            \n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}